#+title: config
#+PROPERTY: header-args :session :tangle config.el
#+auto_tangle: t

* Table of contents :toc:
- [[#default-lines][Default lines]]
- [[#full-screen-on-startup][Full screen on startup]]
- [[#quit-emacs-without-confirmation][Quit emacs without confirmation]]
- [[#line-height][Line height]]
- [[#fonts][Fonts]]
- [[#delete-selection-mode][Delete selection mode]]
- [[#disable-flyspell-mode-globally-by-default][Disable flyspell mode globally by default]]
- [[#dired-customizations][Dired customizations]]
  - [[#dired-infinite-buffers-disable][Dired infinite buffers disable]]
  - [[#dired-async-mode-on-by-default][Dired async mode on by default]]
- [[#org-auto-tangle][Org auto tangle]]
- [[#org-noter-settings][Org noter settings]]
- [[#toggle-truncate-lines][Toggle truncate lines]]
- [[#toggle-comment-lines][Toggle comment lines]]
- [[#mouse-support-for-terminal-version][Mouse support for terminal version]]
- [[#cursor-blinking][Cursor blinking]]
- [[#org-bullets][Org bullets]]
  - [[#setting-bullet-symbols][Setting bullet symbols]]
  - [[#showing-numbers-for-org-headings][Showing numbers for org headings]]
- [[#org-unordered-list-bullet-style][Org unordered list bullet style]]
- [[#org-see-latex-fragments][Org see latex fragments]]
- [[#hide-org-mode-emphasis-markers][Hide org mode emphasis markers]]
- [[#latex-equation-preview-on-startup][LaTeX equation preview on startup]]
- [[#org-asynchronous-export][Org asynchronous export]]
- [[#org-mode-inline-images][Org mode inline images]]
- [[#org-mode-tables-centering][Org mode tables centering]]
- [[#org-mode-source-block-editing-vertical-split][Org mode source block editing vertical split]]
- [[#abaqus-major-mode][Abaqus major mode]]
- [[#ls-dyna-major-mode][LS-DYNA major mode]]
- [[#jump-from-src-code-to-org-file-src-block][Jump from src code to org file src block]]
- [[#org-export-preserve-line-breaks][Org export preserve line breaks]]
- [[#disabling-auto-fill-in-org-mode][Disabling auto fill in org mode]]
- [[#toggle-evil-mode][Toggle evil mode]]
- [[#tramp-config][TRAMP config]]
- [[#permanently-display-workspaces-minibuffer][Permanently display workspaces minibuffer]]
- [[#auctex][Auctex]]
  - [[#disable-project-prompt][Disable project prompt]]
- [[#revert-buffer-and-centering][Revert buffer and centering]]
- [[#gnuplot-mode-for-gp-files][Gnuplot mode for .gp files]]
- [[#python][Python]]
  - [[#setting-python-environments][Setting python environments]]
  - [[#debugging][Debugging]]

* Default lines
#+BEGIN_SRC elisp
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-

;; Place your private configuration here! Remember, you do not need to run 'doom
;; sync' after modifying this file!


;; Some functionality uses this to identify you, e.g. GPG configuration, email
;; clients, file templates and snippets. It is optional.
(setq user-full-name "Vasu Kolli"
      user-mail-address "vasukolli23@gmail.com")

;; Doom exposes five (optional) variables for controlling fonts in Doom:
;;
;; - `doom-font' -- the primary font to use
;; - `doom-variable-pitch-font' -- a non-monospace font (where applicable)
;; - `doom-big-font' -- used for `doom-big-font-mode'; use this for
;;   presentations or streaming.
;; - `doom-unicode-font' -- for unicode glyphs
;; - `doom-serif-font' -- for the `fixed-pitch-serif' face
;;
;; See 'C-h v doom-font' for documentation and more examples of what they
;; accept. For example:
;;
;;(setq doom-font (font-spec :family "Fira Code" :size 12 :weight 'semi-light)
;;      doom-variable-pitch-font (font-spec :family "Fira Sans" :size 13))
;;
;; If you or Emacs can't find your font, use 'M-x describe-font' to look them
;; up, `M-x eval-region' to execute elisp code, and 'M-x doom/reload-font' to
;; refresh your font settings. If Emacs still can't find your font, it likely
;; wasn't installed correctly. Font issues are rarely Doom issues!

;; There are two ways to load a theme. Both assume the theme is installed and
;; available. You can either set `doom-theme' or manually load a theme with the
;; `load-theme' function. This is the default:
(setq doom-theme 'doom-oceanic-next)

;; This determines the style of line numbers in effect. If set to `nil', line
;; numbers are disabled. For relative line numbers, set this to `relative'.
(setq display-line-numbers-type 'relative)

;; If you use `org' and don't want your org files in the default location below,
;; change `org-directory'. It must be set before org loads!
;; (setq org-directory "~/org/")


;; Whenever you reconfigure a package, make sure to wrap your config in an
;; `after!' block, otherwise Doom's defaults may override your settings. E.g.
;;
;;   (after! PACKAGE
;;     (setq x y))
;;
;; The exceptions to this rule:
;;
;;   - Setting file/directory variables (like `org-directory')
;;   - Setting variables which explicitly tell you to set them before their
;;     package is loaded (see 'C-h v VARIABLE' to look up their documentation).
;;   - Setting doom variables (which start with 'doom-' or '+').
;;
;; Here are some additional functions/macros that will help you configure Doom.
;;
;; - `load!' for loading external *.el files relative to this one
;; - `use-package!' for configuring packages
;; - `after!' for running code after a package has loaded
;; - `add-load-path!' for adding directories to the `load-path', relative to
;;   this file. Emacs searches the `load-path' when you load packages with
;;   `require' or `use-package'.
;; - `map!' for binding new keys
;;
;; To get information about any of these functions/macros, move the cursor over
;; the highlighted symbol at press 'K' (non-evil users must press 'C-c c k').
;; This will open documentation for it, including demos of how they are used.
;; Alternatively, use `C-h o' to look up a symbol (functions, variables, faces,
;; etc).
;;
;; You can also try 'gd' (or 'C-c c d') to jump to their definition and see how
;; they are implemented.
#+END_SRC

* Full screen on startup
#+begin_src elisp
;; Enable true fullscreen mode on startup
(add-hook 'window-setup-hook #'toggle-frame-maximized)
#+end_src

* Quit emacs without confirmation
#+begin_src elisp
(setq confirm-kill-emacs nil)
#+end_src

* Line height
#+begin_src elisp
(setq-default line-spacing 3)
#+end_src

* Fonts
#+BEGIN_SRC elisp
(setq doom-font (font-spec :family "JetBrainsMono Nerd Font" :size 16)
      doom-variable-pitch-font (font-spec :family "JetBrainsMono Nerd Font" :size 14)
      doom-big-font (font-spec :family "JetBrainsMono Nerd Font" :size 22))
(after! doom-themes
  (setq doom-themes-enable-bold t
        doom-themes-enable-italic t))
(custom-set-faces!
  '(font-lock-comment-face :slant italic)
  '(font-lock-keyword-face :slant italic))
#+END_SRC

* Delete selection mode
This allows emacs to replace the selected text upon paste.
#+begin_src elisp
(setq delete-selection-mode t)
#+end_src

* Disable flyspell mode globally by default
#+begin_src elisp
(setq-default flyspell-mode nil)
#+end_src

* Dired customizations
** Dired infinite buffers disable
#+begin_src elisp
(setq dired-kill-when-opening-new-dired-buffer t)
#+end_src

** Dired async mode on by default
#+begin_src elisp
(setq dired-async-mode t)
#+end_src
* Org auto tangle
#+BEGIN_SRC elisp
(use-package! org-auto-tangle
  :defer t
  :hook (org-mode . org-auto-tangle-mode)
  :config
  (setq org-auto-tangle-default t))
#+END_SRC

* Org noter settings
#+begin_src elisp
(after! org-noter
  (setq org-noter-always-create-frame nil
        org-noter-highlight-selected t))
#+end_src

* Toggle truncate lines
#+BEGIN_SRC elisp
(map! :leader
      (:prefix ("t" . "toggle")
       :desc "Truncate lines"          "t" #'toggle-truncate-lines))
#+END_SRC

* Toggle comment lines
#+BEGIN_SRC elisp
(map! :leader
      (:prefix ("t" . "toggle")
       :desc "Comment/Uncomment lines"          "/" #'comment-line))
#+END_SRC

* Mouse support for terminal version
#+BEGIN_SRC elisp
(xterm-mouse-mode 1)
#+END_SRC

* Cursor blinking
Usually the cursor blinks for 10 times and if there is no input it stops blinking. But I want it to blink forever.
#+begin_src elisp
;; Enable cursor blinking indefinitely
(setq blink-cursor-mode t
      blink-cursor-interval 0.5  ; Time (in seconds) between blinks
      blink-cursor-delay 0.0)    ; No delay before blinking starts
(blink-cursor-mode 1)          ; Activate cursor blinking
#+end_src

* Org bullets
** Setting bullet symbols
#+begin_src elisp
(setq org-superstar-headline-bullets-list '("ↂ" "۞" "㈣" "◉" "○" "◆" "✜" "✸"))
#+end_src
** Showing numbers for org headings
#+begin_src elisp
(after! org
  (add-hook 'org-mode-hook #'org-num-mode))
#+end_src

* Org unordered list bullet style
TODO

* Org see latex fragments
#+begin_src elisp
(add-hook 'org-mode-hook 'org-fragtog-mode)
#+end_src

* Hide org mode emphasis markers
These are * in *bold*, / in /italic/ etc.
#+begin_src elisp
(setq org-hide-emphasis-markers t)
#+end_src

* LaTeX equation preview on startup
#+begin_src elisp
(setq org-startup-with-latex-preview t)
#+end_src

* Org asynchronous export
#+begin_src elisp
(setq org-export-in-background t)
#+end_src

* Org mode inline images
#+begin_src elisp
(setq org-image-actual-width (/ (display-pixel-width) 3))
#+end_src

* Org mode tables centering
#+begin_src elisp
(setq org-table-default-attributes
      (list
       '(:align 'center)
       '(:valign 'center)
       '(:hlines nil)))
#+end_src

* Org mode source block editing vertical split
#+begin_src elisp
;; Set global window splitting preferences to always split vertically
(after! org
  (setq org-src-window-setup 'split-window-right)
  (set-popup-rule! "^\\*Org Src" :ignore t))
#+end_src

* Abaqus major mode
#+begin_src elisp
(load! "~/.config/doom/emacs_modes/abaqus.el")
(add-hook 'abaqus-mode-hook 'turn-on-font-lock)
(autoload 'abaqus-mode "abaqus" "Enter abaqus mode." t)
#+end_src

* LS-DYNA major mode
#+begin_src elisp
(load! "~/.config/doom/emacs_modes/lsdyna.el")
(add-hook 'lsdyna-mode-hook 'turn-on-font-lock)
(autoload 'lsdyna-mode "lsdyna" "Enter lsdyna mode." t)
#+end_src

* Jump from src code to org file src block
We can jump from a particular line in org mode tangled source file to the corresponding org mode src block line using the function org-babel-tangle-jump-to-org. But the cursor is at the bottom of the screen. Now we change it to the center.
#+begin_src elisp
(defadvice org-babel-tangle-jump-to-org (after recenter activate)
  (recenter))
#+end_src

* Org export preserve line breaks
#+begin_src elisp
  (setq org-export-preserve-breaks t)
#+end_src

* Disabling auto fill in org mode
#+begin_src elisp
(after! org
  ;; disable auto-complete in org-mode buffers
  (remove-hook 'org-mode-hook #'auto-fill-mode)
  ;; disable company too
  (setq company-global-modes '(not org-mode)))
#+end_src

* Toggle evil mode
Sometimes I would use nvim from a terminal and it is necessary to turn off evil mode for better operation
#+begin_src elisp
(defun toggle-evil-mode ()
  "Toggle evil-mode on and off."
  (interactive) ; Make the function callable via M-x and keybindings
  (if (bound-and-true-p evil-mode)
      (progn
        (evil-mode -1)
        (message "Evil mode disabled"))
    (evil-mode 1)
    (message "Evil mode enabled")))
(global-set-key (kbd "<f2>") #'toggle-evil-mode)
#+end_src

* TRAMP config
Default TRAMP is too slow. Learnt from https://www.gnu.org/software/emacs/manual/html_node/tramp/Frequently-Asked-Questions.html
#+begin_src elisp
(after! tramp
  (setq vc-handled-backends nil)
  (setq vc-ignore-dir-regexp
      (format "\\(%s\\)\\|\\(%s\\)"
              vc-ignore-dir-regexp
              tramp-file-name-regexp))
  (setq tramp-verbose 1)
  (setq remote-file-name-inhibit-locks t)
  (setq tramp-default-method "rsync")
  (setq tramp-use-ssh-controlmaster-options nil)
  (setq projectile--mode-line nil)
  (setq remote-file-name-inhibit-cache nil)
  (setq tramp-cache-inodes t)
  (setq tramp-completion-reread-directory-timeout t)
  (setq debug-ignored-errors
      (cons 'remote-file-error debug-ignored-errors))
  )
#+end_src

* Permanently display workspaces minibuffer
#+begin_src elisp
(after! persp-mode
  (defun display-workspaces-in-minibuffer ()
    (with-current-buffer " *Minibuf-0*"
      (erase-buffer)
      (insert (+workspace--tabline))))
  (run-with-idle-timer 1 t #'display-workspaces-in-minibuffer)
  (+workspace/display))
#+end_src

* Auctex
** TODO Disable project prompt
#+begin_src elisp
#+end_src

* Revert buffer and centering
#+begin_src elisp
(defun vasu/revert-and-center-last-line ()
  "Revert the current buffer, go to the last line, and center the view."
  (interactive) ; Makes the function callable through M-x and key bindings
  (revert-buffer :ignore-auto :noconfirm) ; Reverts the buffer without confirmation
  (goto-char (point-max)) ; Moves the cursor to the end of the buffer
  (recenter)) ; Centers the line in the window

(map! "<f5>" #'vasu/revert-and-center-last-line)
#+end_src

* Gnuplot mode for .gp files
#+begin_src elisp
(add-to-list 'auto-mode-alist '("\\.gp\\'" . gnuplot-mode))
(add-hook 'gnuplot-mode-hook (lambda () (display-line-numbers-mode 1)))
#+end_src


* Python
** Setting python environments
#+begin_src elisp
(after! python
  (setq python-shell-interpreter "/home/vasu/.pyenv/versions/3.10.0/envs/common_3_10_0/bin/python3")
  (setq lsp-pyright-python-executable-cmd "/home/vasu/.pyenv/versions/3.10.0/envs/common_3_10_0/bin/python3"))
#+end_src

** Debugging
Install python-language-server[all] debugpy ptvsd in the virtual environment.
#+begin_src elisp
(after! dap-mode
  (require 'dap-python)
  (setq dap-python-executable "/home/vasu/.pyenv/versions/3.11.0/envs/common_3_11_0/bin/python3")
  (setq dap-python-debugger 'debugpy))
#+end_src

Key bindings for dap mode
#+begin_src elisp
;; (map! :map dap-mode-map
;;       :leader
;;       :prefix ("d" . "dap")
;;       ;; basics
;;       :desc "dap next"          "n" #'dap-next
;;       :desc "dap step in"       "i" #'dap-step-in
;;       :desc "dap step out"      "o" #'dap-step-out
;;       :desc "dap continue"      "c" #'dap-continue
;;       :desc "dap hydra"         "h" #'dap-hydra
;;       :desc "dap debug restart" "r" #'dap-debug-restart
;;       :desc "dap debug"         "s" #'dap-debug

;;       ;; debug
;;       :prefix ("dd" . "Debug")
;;       :desc "dap debug recent"  "r" #'dap-debug-recent
;;       :desc "dap debug last"    "l" #'dap-debug-last

;;       ;; eval
;;       :prefix ("de" . "Eval")
;;       :desc "eval"                "e" #'dap-eval
;;       :desc "eval region"         "r" #'dap-eval-region
;;       :desc "eval thing at point" "s" #'dap-eval-thing-at-point
;;       :desc "add expression"      "a" #'dap-ui-expressions-add
;;       :desc "remove expression"   "d" #'dap-ui-expressions-remove

;;       :prefix ("db" . "Breakpoint")
;;       :desc "dap breakpoint toggle"      "b" #'dap-breakpoint-toggle
;;       :desc "dap breakpoint condition"   "c" #'dap-breakpoint-condition
;;       :desc "dap breakpoint hit count"   "h" #'dap-breakpoint-hit-condition
;;       :desc "dap breakpoint log message" "l" #'dap-breakpoint-log-message)
#+end_src
